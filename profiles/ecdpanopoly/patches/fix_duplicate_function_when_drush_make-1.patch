diff --git a/profiles/ecdpanopoly/modules/eccontrib/cer/cer.module b/profiles/ecdpanopoly/modules/eccontrib/cer/cer.module
index ed01a66..a25e025 100644
--- a/profiles/ecdpanopoly/modules/eccontrib/cer/cer.module
+++ b/profiles/ecdpanopoly/modules/eccontrib/cer/cer.module
@@ -113,11 +113,11 @@ function cer_node_insert(StdClass $node) {
   // This tricky bug can easily rear its ugly head if you have an Entity Reference field,
   // referencing nodes, and a node access module enabled.
   //
-  // Entity Reference's bundled selection handlers will use either EntityFieldQuery or 
-  // Views, both of which are affected by node access grants (and rightfully so). 
-  // However, when creating a node, core invokes hook_node_save() *before* it writes the 
-  // grants to the database, which can cause EntityFieldQuery (or Views, unless 
-  // configured to disable SQL rewriting) to return no results if the user isn't the 
+  // Entity Reference's bundled selection handlers will use either EntityFieldQuery or
+  // Views, both of which are affected by node access grants (and rightfully so).
+  // However, when creating a node, core invokes hook_node_save() *before* it writes the
+  // grants to the database, which can cause EntityFieldQuery (or Views, unless
+  // configured to disable SQL rewriting) to return no results if the user isn't the
   // superuser. Since CER asks the field backend to validate the reference, this can
   // cause the reference to not be validated, and the cross-reference to fail.
   //
@@ -163,7 +163,7 @@ function cer_entity_delete($entity, $type) {
 /**
  * Process a entity's corresponding entity references.
  *
- * @param string $op 
+ * @param string $op
  *  The operation being performed on the entity (insert, update, or delete).
  *
  * @param object $entity
@@ -317,24 +317,6 @@ function cer_features_override_ignore($component) {
 }
 
 /**
- * Implements hook_features_ignore().
- */
-function cer_features_ignore($component) {
-  $ignores = array();
-  if ($component == 'cer') {
-    $ignores['wrapper'] = 0;
-  }
-  return $ignores;
-}
-
-/**
- * Implements hook_features_override_ignore().
- */
-function cer_features_override_ignore($component) {
-  return cer_features_ignore($component);
-}
-
-/**
  * Implements hook_entity_property_info().
  */
 function cer_entity_property_info() {
@@ -416,7 +398,7 @@ function cer_entity_property_info_alter(array &$info) {
   );
 
   // Field collections are special. Because they live inside other entities (to
-  // potentially infinite levels of recursion), their CER property callbacks must be 
+  // potentially infinite levels of recursion), their CER property callbacks must be
   // able to recurse upwards through the chain of embedding.
   if (module_exists('field_collection')) {
     $struct = &$info['field_collection_item']['properties']['cer']['property info'];
