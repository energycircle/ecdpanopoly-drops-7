***************
*** 113,123 ****
    // This tricky bug can easily rear its ugly head if you have an Entity Reference field,
    // referencing nodes, and a node access module enabled.
    //
-   // Entity Reference's bundled selection handlers will use either EntityFieldQuery or
-   // Views, both of which are affected by node access grants (and rightfully so).
-   // However, when creating a node, core invokes hook_node_save() *before* it writes the
-   // grants to the database, which can cause EntityFieldQuery (or Views, unless
-   // configured to disable SQL rewriting) to return no results if the user isn't the
    // superuser. Since CER asks the field backend to validate the reference, this can
    // cause the reference to not be validated, and the cross-reference to fail.
    //
--- 113,123 ----
    // This tricky bug can easily rear its ugly head if you have an Entity Reference field,
    // referencing nodes, and a node access module enabled.
    //
+   // Entity Reference's bundled selection handlers will use either EntityFieldQuery or
+   // Views, both of which are affected by node access grants (and rightfully so).
+   // However, when creating a node, core invokes hook_node_save() *before* it writes the
+   // grants to the database, which can cause EntityFieldQuery (or Views, unless
+   // configured to disable SQL rewriting) to return no results if the user isn't the
    // superuser. Since CER asks the field backend to validate the reference, this can
    // cause the reference to not be validated, and the cross-reference to fail.
    //
***************
*** 163,169 ****
  /**
   * Process a entity's corresponding entity references.
   *
-  * @param string $op
   *  The operation being performed on the entity (insert, update, or delete).
   *
   * @param object $entity
--- 163,169 ----
  /**
   * Process a entity's corresponding entity references.
   *
+  * @param string $op
   *  The operation being performed on the entity (insert, update, or delete).
   *
   * @param object $entity
***************
*** 416,422 ****
    );
  
    // Field collections are special. Because they live inside other entities (to
-   // potentially infinite levels of recursion), their CER property callbacks must be
    // able to recurse upwards through the chain of embedding.
    if (module_exists('field_collection')) {
      $struct = &$info['field_collection_item']['properties']['cer']['property info'];
--- 398,404 ----
    );
  
    // Field collections are special. Because they live inside other entities (to
+   // potentially infinite levels of recursion), their CER property callbacks must be
    // able to recurse upwards through the chain of embedding.
    if (module_exists('field_collection')) {
      $struct = &$info['field_collection_item']['properties']['cer']['property info'];
